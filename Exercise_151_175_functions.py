'''
Exercise 151 - Loops
Write code that will print out each character in x doubled if that character is also inside y.

Hint: use nesting!
'''

x = "cryptocurrency"
y = "blockchain"

for char_x in x:
    if char_x in y:
        print(char_x * 2)

'''
Exercise 152 - Loops
Write code that will iterate over the range generated by range(9) and for each element that is between 3 and 7 inclusively print out the result of multiplying that element by the second element in the same range.

Hint: use nesting!
'''
my_range = range(9)

for i in my_range:
    if 3 <= i <= 7:
        result = i * range(9)[1]  # Multiply i by the second element in the range
        print(result)

'''
Exercise 153 - Loops
Write code that will iterate over the range starting at 1, up to but not including 11, with a step of 2, and for each element that is between 3 and 8 inclusively print out the result of multiplying that element by the last element in the same range. For any other element of the range (outside [3-8]) print Outside!

Hint: use nesting!
'''
for i in range(1, 11, 2):  # Start at 1, up to but not including 11, step of 2
    if 3 <= i <= 8:
        result = i * range(1, 11, 2)[-1]  # Multiply i by the last element in the range
        print(result)
    else:
        print("Outside!")

'''
Exercise 154 - Loops
Write code that will iterate over the range starting at 5, up to but not including 25, with a step of 5, and for each element that is between 10 and 21 inclusively print out the result of multiplying that element by the second to last element of the same range. For any other element of the range (outside [10-21]) print Outside! Finally, after the entire range is exhausted print out The end!

Hint: use nesting!
'''
for i in range(5, 25, 5):  # Start at 5, up to but not including 25, step of 5
    if 10 <= i <= 21:
        result = i * (range(5, 25, 5)[-2])  # Multiply i by the second to last element in the range
        print(result)
    else:
        print("Outside!")

print("The end!")

'''

Exercise 155 - Loops
Write a while loop that prints out the value of x times 11 while x is less than or equal to 11.  When x becomes equal to 10, print out x is 10! Be careful not to end up with an infinite loop!
'''
x = 1

while x <= 11:
    if x == 10:
        print("x is 10!")
    else:
        print(x * 11)
    x += 1

'''
Exercise 156 - Loops
Insert a break statement where necessary in order to obtain the following result:

1
1
100
20
10
'''

x = [1, 2]
y = [10, 100]

for i in x:
    for j in y:
        if i % 2 == 0:
            print(i * j)
            break  # Break out of the inner loop when i % 2 == 0
        print(i)
    print(j)

'''
Exercise 157 - Loops
Insert a break statement where necessary in order to obtain the following result:

1
10
20
2
10
'''
x = [1, 2]
y = [10, 100]

for i in x:
    for j in y:
        if i % 2 == 0:
            print(i * j)
        print(i)
        break
    print(j)

'''
Exercise 158 - Loops
Insert a break statement where necessary in order to obtain the following result:

1
1
100
10
'''
x = [1, 2]
y = [10, 100]

for i in x:
    for j in y:
        if i % 2 == 0:
            break
            print(i * j)
        print(i)
    print(j)

'''
Exercise 159 - Loops
Insert a continue statement where necessary in order to obtain the following result:

1
1
100
20
200
100
'''
x = [1, 2]
y = [10, 100]

for i in x:
    for j in y:
        if i % 2 == 0:
            print(i * j)
            continue  # Skip to the next iteration of the inner loop
        print(i)
    print(j)


'''

Exercise 160 - Loops
Insert a continue statement where necessary in order to obtain the following result:

1
1
100
100
'''


x = [1, 2]
y = [10, 100]

for i in x:
    for j in y:
        if i % 2 == 0:
            print(i * j)
            continue  # Skip to the next iteration of the inner loop
        print(i)
    print(j)

'''
Exercise 161 - Exceptions
Fix the code below so that it doesn't generate a SyntaxError.

Hint! The result should be 20 200
'''
x = [1, 2]
y = [10, 100]

for i in x:
    for j in y:
        if i % 2 == 0:  # Added a colon here
            print(i * j)

'''
Exercise 162 - Exceptions
Fix the code below so that it doesn't generate a SyntaxError.

Hint! The result should be 20 200
'''
x = [1, 2]
y = [10, 100]

for i in x:
    for j in y:
        if i % 2 == 0:
            print(i * j)


'''

Exercise 163 - Exceptions
Fix the code below so that it doesn't generate a NameError.

Hint! The result should be 20 200'''

x = [1, 2]
y = [10, 100]

for i in x:
    for j in y:
        if i % 2 == 0:
            print(i * j)

'''
Exercise 164 - Exceptions
Fix the code below so that it doesn't generate a TypeError.

Hint! The result should be 20 200
'''
x = [1, 2]
y = [10, 100]

for i in x:
    for j in y:
        if i % 2 == 0:
            print(i * j)
'''
Exercise 165 - Exceptions
Fix the code below so that it doesn't generate an IndexError.

Hint! The result should be 200 200


'''
x = [1, 2]
y = [10, 100]

for i in x:
    for j in y:
        if i % 2 == 0:
            print(x[1] * y[1])


'''

Exercise 166 - Exceptions
Add the necessary clause(s) to the code below so that in case the ZeroDivisionError exception is raised then the program prints out Zero! to the screen.
'''
try:
    print(25 % 0)
except ZeroDivisionError:
    print("Zero!")

'''

Exercise 167 - Exceptions
Add the necessary clause(s) to the code below so that in case the code under try raises no exceptions then the program prints out the result of the math operation and the string Clean! to the screen.
'''
try:
    result = 25 % 5 ** 5 + 5
    print(result)
except:
    print("Bug!")
else:
    print("Clean!")


'''
Exercise 168 - Exceptions
Add the necessary clause(s) to the code below so that no matter if the code under try raises any exceptions or not, then the program prints out the string Result! to the screen.
'''
try:
    print(25 % 0 ** 5 + 5)
except:
    print("Bug!")
finally:
    print("Result!")

'''
Exercise 169 - Exceptions
Add the necessary clause(s) to the code below so that in case the code under try raises the ZeroDivisionError exception then the program prints out the string Zero! to the screen; additionally, if the code under try raises the IndexError exception then the program prints out the string Index! to the screen.
'''
x = [1, 9, 17, 32]

try:
    print(x[3] % 3 ** 5 + x[4])  # This line may raise IndexError or ZeroDivisionError
except ZeroDivisionError:
    print("Zero!")
except IndexError:
    print("Index!")


'''
Exercise 170 - Exceptions
Add the necessary clause(s) to the code below so that in case the code under try raises no exceptions then the program prints out the result of the math operation and the string Clean! to the screen. If the code under try raises the ZeroDivisionError exception then the program prints Zero! to the screen. Ultimately, regardless of the result generated by the code under try, the program should print out Finish! to the screen.
'''

try:
    result = 25 % 5 ** 5 + 5
    print(result)
    print("Clean!")
except ZeroDivisionError:
    print("Zero!")
finally:
    print("Finish!")

'''
Exercise 171 - Functions
Implement a function called my_func() that simply prints out Hello Python! to the screen and call the function.
'''


def my_func():
    print('Hello Python!')

my_func()

'''
Exercise 172 - Functions
Implement a function called my_func() that creates a variable add which stores the result of adding 10 and 20, and prints out the value of add. Don't forget to also call the function!
'''
def my_func(x,y):
    c=x+y
    print(c)

my_func(10,20)

'''
Exercise 173 - Functions
Implement a function called my_func() that takes a single parameter x and multiplies it with 10, also returning the result when the function is called.
'''


def my_func(x):
    return x * 10


result = my_func(7)
print(result)

'''
Exercise 174 - Functions
Implement a function called my_func() that takes two parameters x and y and divides x by y, also returning the result when the function is called.
'''
def my_func(x,y):
    return x/y

result = my_func(38,19)
print(result)


'''
Exercise 175 - Functions
Implement a function called my_func() that takes 3 parameters x, y and z and raises x to the power of y then adds z, also returning the result when the function is called.
'''
def my_func(x,y,z):
    return (x**y)+z

result = my_func(3,3,3)
print(result)
